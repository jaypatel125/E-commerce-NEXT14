// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION MODELS
model User {
  id            String   @id @default(cuid()) @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  premium       Boolean  @default(false)
  role          String   @default("user")
  banned        Boolean  @default(false)
  banReason     String?
  banExpires    DateTime? /// Unix timestamp for ban expiration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions      Session[]
  accounts      Account[]
  Order         Order[]
  SellerRequest SellerRequest[]
  Product       Product[]

  Cart Cart[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


// ORDER RELATED MODELS
enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

model Order {
  id          String      @id @default(cuid()) @map("_id")
  orderNumber String      @unique
  amount      Float
  isPaid      Boolean     @default(false)
  status      OrderStatus @default(awaiting_shipment)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartAmount  Float

  userId            String
  user              User             @relation(fields: [userId], references: [id])
  shippingAddressId String?
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])

  OrderItem OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid()) @map("_id")
  orderId   String
  productId String
  variantId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])
}

model ShippingAddress {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?

  orders Order[]
}

model BillingAddress {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?

  orders Order[]
}

// SELLER RELATED MODELS
model SellerRequest {
  id           String        @id @default(cuid()) @map("_id")
  status       RequestStatus @default(pending)
  denialReason String?
  approvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  pending
  approved
  denied
}

// PRODUCT RELATED MODELS
model Product {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  routerName  String   @unique
  description String
  price       Float?
  basePrice   Float
  images      String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collectionId String?
  collection   Collection? @relation("ProductCollections", fields: [collectionId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  variants  Variant[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Variant {
  id    String @id @default(cuid()) @map("_id")
  color String
  size  String
  stock Int

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Collection {
  id          String         @id @default(cuid()) @map("_id")
  name        String
  description String?
  type        CollectionType
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  products Product[] @relation("ProductCollections")
}

enum CollectionType {
  Sale
  Seasonal
  NewArrivals
  WeeklyPicks
}

// CART RELATED MODELS
model CartItem {
  id        String   @id @default(cuid()) @map("_id")
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variantId String  @unique
  variant   Variant @relation(fields: [variantId], references: [id])
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @unique
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]
}
